CREATE TABLE sql_device_keys(
  user_id TEXT PRIMARY KEY NOT NULL,
  device_keys TEXT NOT NULL
);

getDeviceKeys:
SELECT device_keys FROM sql_device_keys
WHERE user_id = ?;

saveDeviceKeys:
INSERT OR REPLACE INTO sql_device_keys
VALUES (?, ?);

deleteDeviceKeys:
DELETE FROM sql_device_keys
WHERE user_id = ?;

CREATE TABLE sql_cross_signing_keys(
  user_id TEXT PRIMARY KEY NOT NULL,
  cross_signing_keys TEXT NOT NULL
);

getCrossSigningKeys:
SELECT cross_signing_keys FROM sql_cross_signing_keys
WHERE user_id = ?;

saveCrossSigningKeys:
INSERT OR REPLACE INTO sql_cross_signing_keys
VALUES (?, ?);

deleteCrossSigningKeys:
DELETE FROM sql_cross_signing_keys
WHERE user_id = ?;

CREATE TABLE sql_outdated_device_keys (
  id INTEGER NOT NULL PRIMARY KEY,
  outdated_device_keys TEXT
);

saveOutdatedDeviceKeys:
INSERT OR REPLACE INTO sql_outdated_device_keys
VALUES  ?;

getOutdatedDeviceKeys:
SELECT outdated_device_keys FROM sql_outdated_device_keys
WHERE id = ?;

deleteOutdatedDeviceKeys:
DELETE FROM sql_outdated_device_keys
WHERE id = ?;

CREATE TABLE sql_key_verification_state (
    user_id TEXT NOT NULL,
    device_id TEXT,
    key_id TEXT NOT NULL,
    key_algorithm TEXT NOT NULL,
    verification_state TEXT NOT NULL,
    PRIMARY KEY (user_id,device_id,key_id,key_algorithm)
);

saveKeyVerificationState:
INSERT OR REPLACE INTO sql_key_verification_state
VALUES  ?;

getKeyVerificationState:
SELECT verification_state FROM sql_key_verification_state
WHERE user_id = ? AND device_id = ? AND key_id = ? AND key_algorithm = ?;

deleteKeyVerificationState:
DELETE FROM sql_key_verification_state
WHERE user_id = ? AND device_id = ? AND key_id = ? AND key_algorithm = ?;

CREATE TABLE sql_key_chain_link (
    signing_user_id TEXT NOT NULL,
    signing_key_id TEXT NOT NULL,
    signing_key_value TEXT NOT NULL,
    signed_user_id TEXT NOT NULL,
    signed_key_id TEXT NOT NULL,
    signed_key_value TEXT NOT NULL,
    PRIMARY KEY (signing_user_id,signing_key_id,signing_key_value,signed_user_id,signed_key_id,signed_key_value)
);

saveKeyChainLink:
INSERT OR REPLACE INTO sql_key_chain_link
VALUES ?;

getKeyChainLinkBySigningKey:
SELECT * FROM sql_key_chain_link
WHERE signing_user_id = ? AND signing_key_id = ? AND signing_key_value = ?;

deleteKeyChainLinkBySignedgKey:
DELETE FROM sql_key_chain_link
WHERE signed_user_id = ? AND signed_key_id = ? AND signed_key_value = ?;

CREATE TABLE sql_secrets (
  id INTEGER NOT NULL PRIMARY KEY,
  secrets TEXT
);

saveSecrets:
INSERT OR REPLACE INTO sql_secrets
VALUES  ?;

getSecrets:
SELECT secrets FROM sql_secrets
WHERE id = ?;

deleteSecrets:
DELETE FROM sql_secrets
WHERE id = ?;

CREATE TABLE sql_secret_key_request (
  id TEXT PRIMARY KEY NOT NULL,
  secret_key_request TEXT NOT NULL
);

getAllSecretKeyRequests:
SELECT * FROM sql_secret_key_request;

getSecretKeyRequest:
SELECT * FROM sql_secret_key_request
WHERE id = ?;

saveSecretKeyRequest:
INSERT OR REPLACE INTO sql_secret_key_request
VALUES (?, ?);

deleteSecretKeyRequest:
DELETE FROM sql_secret_key_request
WHERE id = ?;
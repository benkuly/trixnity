stages:
  - prepare-build
  - build
  - prepare-publish
  - publish-mac
  - publish-linux

variables:
  GRADLE_OPTS: -Dorg.gradle.daemon=false
  GRADLE_USER_HOME: $CI_PROJECT_DIR/.gradle
  KONAN_DATA_DIR: $CI_PROJECT_DIR/.konan
  BUILD_LINUX_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/trixnity-build-linux:latest
  BUILD_MAC_IMAGE_NAME: macos-12-xcode-13

.build-cache: &build-cache
  - key: global-tixnity-cache
    paths:
    - $GRADLE_USER_HOME
    - $KONAN_DATA_DIR

.docker-variables: &docker-variables
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

.artifact-reports: &artifact-reports
  name: reports
  when: always
  paths: [ "**/build/reports" ]

.if-merge-request: &if-merge-request
  - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
    when: never
  - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME

.if-release: &if-release
  - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+.*/'

build-trixnity-build-linux-image:
  stage: prepare-build
  tags: [ "trixnity-linux-internal" ]
  image: docker:20
  services:
    - name: docker:20-dind
      command: [ "--tls=false" ]
  when: manual
  script:
    - docker build gitlab-ci/ -t $BUILD_LINUX_IMAGE_NAME
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $BUILD_LINUX_IMAGE_NAME

# build-mac:
#   stage: build
#   tags: [ "shared-macos-amd64" ]
#   image: $BUILD_MAC_IMAGE_NAME
#   cache:
#     - *build-cache
#   artifacts: *artifact-reports
#   rules:
#     - *if-merge-request
#   script:
#     - ./gradlew buildOlm
#     - ./gradlew build --stacktrace

build-linux:
  stage: build
  tags: [ "trixnity-linux-internal" ]
  image: $BUILD_LINUX_IMAGE_NAME
  services:
    - name: docker:20-dind
      command: [ "--tls=false" ]
  cache:
    - *build-cache
  variables: *docker-variables
  artifacts: *artifact-reports
  rules:
    - *if-merge-request
  script:
    - ./gradlew buildOlm
    - ./gradlew build --stacktrace

create-nexus-staging-repo:
  stage: prepare-publish
  tags: [ "trixnity-linux-internal" ]
  image: ubuntu:latest
  rules:
    - *if-release
  artifacts:
    paths: [ "./OSSRH_REPOSITORY_ID" ]
  script:
    - apt-get update && apt-get install -y curl jq
    - >
        jsonOutput=$(curl -s
        --request POST -u "$OSSRH_USERNAME:$OSSRH_PASSWORD"
        --url https://oss.sonatype.org/service/local/staging/profiles/65b35e28422b2/start
        --header 'Accept: application/json'
        --header 'Content-Type: application/json'
        --data '{ "data": {"description" : "'"$CI_COMMIT_TAG"'"} }'
        )
    - OSSRH_REPOSITORY_ID=$(echo "$jsonOutput" | jq -r '.data.stagedRepositoryId')
    - >
        if [ -z "$OSSRH_REPOSITORY_ID" ]; then
        echo "Error while creating the staging repository. Response: $jsonOutput";
        exit 1;
        fi
    - echo -n $OSSRH_REPOSITORY_ID > ./OSSRH_REPOSITORY_ID

# publish-mac:
#   stage: publish-mac
#   tags: [ "shared-macos-amd64" ]
#   image: $BUILD_MAC_IMAGE_NAME
#   cache:
#     - *build-cache
#   artifacts:
#     paths: [ "./trixnity-olm/build/processedResources" ]
#   dependencies:
#     - create-nexus-staging-repo
#   rules:
#    - *if-release
#   script:
#     - OSSRH_REPOSITORY_ID=$(cat ./OSSRH_REPOSITORY_ID)
#     - ./gradlew buildOlm
#     - ./gradlew publish --stacktrace

publish-linux:
  stage: publish-linux
  tags: [ "trixnity-linux-internal" ]
  image: $BUILD_LINUX_IMAGE_NAME
  services:
    - name: docker:20-dind
      command: [ "--tls=false" ]
  cache:
    - *build-cache
  dependencies:
    - create-nexus-staging-repo
#     - publish-mac
  rules:
    - *if-release
  script:
    - export OSSRH_REPOSITORY_ID=$(cat ./OSSRH_REPOSITORY_ID)
    - ./gradlew buildOlm
    - ./gradlew publish --stacktrace